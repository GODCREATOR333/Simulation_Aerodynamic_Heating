import matplotlib.pyplot as plt
import numpy as np
import scipy.interpolate as interp
from scipy.signal import savgol_filter


# Height vs time data
time = [0.05277749659772102, 0.7406845047294484, 1.2735910067370737, 1.9936228363194655,
        2.525685798157709, 3.2454364476836393, 3.652936644509679, 4.3414060127543275,
        4.999156459830616, 5.75046957069429, 6.3149385340396575, 7.066251644903331,
        7.568158045686135, 8.068939726243098, 8.538721305575237, 9.103471448977068,
        9.573534208365668, 10.106721890429753, 10.640190752550303, 11.266941098401773,
        11.800691140578778, 12.52325359066932, 12.963440969058944, 13.402503627222725,
        14.030659873356502, 14.501003812801564, 15.035878575204418, 15.53806615604368,
        16.135503481009096, 16.606690960623542, 17.07872198040737, 17.80100325044145,
        18.33531565273138, 18.869909235077774, 19.40394045731124, 19.87653383720799,
        20.504127723228844, 20.97672110312559, 21.637564530822953, 22.140876831888068,
        22.676595134460296, 23.339125642496423, 23.71787517854933, 24.347999685078335,
        24.91584280910123, 25.485091833406436, 25.864684909628725, 26.274715726962913,
        26.497621216722337, 26.845370651550425, 27.288088650448195, 27.50986941998178,
        27.951743878710165, 28.331336954932457, 28.618492087593207, 28.996960443589646,
        29.34583459864358, 29.569583628572392, 29.91733306340048]

height = [0.43695380774033765, 0.24188514357055624, 1.0221598002497103, 1.4122971285892731,
          1.607365792759083, 1.8024344569288644, 2.387640449438237, 2.5827091136080185,
          3.1679151061173627, 3.5580524344569255, 4.5333957553058895, 4.923533083645481,
          5.898876404494416, 6.093945068664169, 6.48408239700376, 7.654494382022477,
          8.23970037453185, 9.215043695380785, 10.38545568039953, 11.165730337078656,
          12.531210986267169, 14.67696629213485, 16.237515605493158, 17.017790262172312,
          18.7734082397004, 19.553682896379556, 21.699438202247208, 22.86985018726594,
          25.015605493133606, 26.381086142322104, 28.33177278401999, 30.28245942571786,
          32.03807740324595, 33.988764044943835, 35.54931335830214, 37.89013732833959,
          39.255617977528104, 41.59644194756555, 44.32740324594258, 46.27808988764046,
          49.0090511860175, 52.91042446941324, 55.25124843945069, 58.37234706616731,
          61.68851435705369, 65.98002496878902, 68.90605493133585, 71.2468789013733,
          73.97784019975032, 76.51373283395756, 79.82990012484396, 81.78058676654183,
          84.51154806491886, 87.43757802746569, 91.33895131086143, 93.4847066167291,
          96.8008739076155, 100.11704119850188, 102.65293383270912,]

# Calculate velocity
velocity = [0]
for i in range(len(time)-1):
    h1 = height[i] * 0.0003048  # Convert ft to km
    h2 = height[i+1] * 0.0003048  # Convert ft to km
    t1 = time[i]
    t2 = time[i+1]
    v = (h2 - h1) / (t2 - t1)
    velocity.append(v)


# Mach number data
mach = [0.0072109355405096665, 0.20833333333333215, 0.5022573363431135, 0.7178016052169554,
        0.9529408076247794, 1.2468648106345626, 1.5995736142462995, 1.7171432154502124,
        1.638763481314271, 1.638763481314271, 1.560383747178328, 1.442814145974415,
        1.3840293453724595, 1.3644344118384755, 1.4036242789064453, 1.5799786807123155,
        2.0306621519939796, 2.3833709556057183, 2.7948645598194126, 3.32392776523702,
        3.7354213694507123, 4.029345372460494, 4.284079508402305, 4.5975984449460725,
        4.773952846751943, 4.969902182091797, 5.048281916227738, 4.969902182091797,
        4.930712315023827, 4.91111738148984, 4.950307248557811, 4.8131427138199125,
        4.773952846751943, 4.754357913217957, 4.695573112616001, 4.715168046149985,
        4.969902182091797, 5.34220591923752, 5.753699523451216, 6.223977928266866,
        6.67466139954853, 7.0077752696262845, 7.419268873839979, 7.75238274391773,
        8.163876348131426, 8.732129420617003, 9.026053423626784, 9.613901429646347,
        9.966610233258086, 10.338913970403809, 10.867977175821418, 11.475420115374966,
        11.80853398545272, 12.141647855530472, 12.592331326812136, 13.043014798093802,
        13.532888136443438, 14.101141208929016, 15.022103085026332]

length_time = len(time)
length_velocity = len(velocity)
length_mach = len(mach)
length_height = len(height)

print(f'length of time = {length_time}')
print(f'length of velocity = {length_velocity}')
print(f'length of mach = {length_mach}')
print(f'length of height = {length_height}')


# interpolate the data to remove variance/noise and make it more accurate
# Currently applying smoothing filter like Savitzky-Golay filter to the interpolated data:
t_interp = np.linspace(min(time), max(time), num=500)
h_interp = interp.interp1d(time, height, kind='cubic')(t_interp)
mach_interp = interp.interp1d(time, mach, kind='cubic')(t_interp)
h_interp_smooth = savgol_filter(h_interp, window_length=50, polyorder=5)
mach_interp_smooth = savgol_filter(mach_interp, window_length=50, polyorder=5)


# Time vs Altitude
plt.subplot(2, 2, 1)
plt.plot(time, height)
plt.title('Time vs Altitude')
plt.xlabel('Time (sec)')
plt.ylabel('Altitude (km)')

# Time vs Mach Number
plt.subplot(2, 2, 2)
plt.plot(time, mach)
plt.title('Time vs Mach Number')
plt.xlabel('Time (sec)')
plt.ylabel('Mach Number')

# Time vs Altitude----interpolated
plt.subplot(2, 2, 3)
plt.plot(t_interp, h_interp_smooth)
plt.title('Time vs Altitude --- interpolated')
plt.xlabel('Time (sec)')
plt.ylabel('Altitude (km)')

# Time vs Mach Number----interpolated
plt.subplot(2, 2, 4)
plt.plot(t_interp, mach_interp_smooth)
plt.title('Time vs Mach Number --- interpolated')
plt.xlabel('Time (sec)')
plt.ylabel('Mach Number')

plt.tight_layout()
plt.show()
