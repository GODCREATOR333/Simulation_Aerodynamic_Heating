import matplotlib.pyplot as plt
import numpy as np
import scipy.interpolate as interp
from scipy.signal import savgol_filter

# Height vs time1 data

# time in seconds
time1 = [0.05277749659772102, 0.7406845047294484, 1.2735910067370737, 1.9936228363194655,
         2.525685798157709, 3.2454364476836393, 3.652936644509679, 4.3414060127543275,
         4.999156459830616, 5.75046957069429, 6.3149385340396575, 7.066251644903331,
         7.568158045686135, 8.068939726243098, 8.538721305575237, 9.103471448977068,
         9.573534208365668, 10.106721890429753, 10.640190752550303, 11.266941098401773,
         11.800691140578778, 12.52325359066932, 12.963440969058944, 13.402503627222725,
         14.030659873356502, 14.501003812801564, 15.035878575204418, 15.53806615604368,
         16.135503481009096, 16.606690960623542, 17.07872198040737, 17.80100325044145,
         18.33531565273138, 18.869909235077774, 19.40394045731124, 19.87653383720799,
         20.504127723228844, 20.97672110312559, 21.637564530822953, 22.140876831888068,
         22.676595134460296, 23.339125642496423, 23.71787517854933, 24.347999685078335,
         24.91584280910123, 25.485091833406436, 25.864684909628725, 26.274715726962913,
         26.497621216722337, 26.845370651550425, 27.288088650448195, 27.50986941998178,
         27.951743878710165, 28.331336954932457, 28.618492087593207, 28.996960443589646,
         29.34583459864358, 29.569583628572392, 29.91733306340048]

# height is in  milli ft
height = [0.43695380774033765, 0.51188514357055624, 1.0221598002497103, 1.4122971285892731,
          1.607365792759083, 1.8024344569288644, 2.387640449438237, 2.5827091136080185,
          3.1679151061173627, 3.5580524344569255, 4.5333957553058895, 4.923533083645481,
          5.898876404494416, 6.093945068664169, 6.48408239700376, 7.654494382022477,
          8.23970037453185, 9.215043695380785, 10.38545568039953, 11.165730337078656,
          12.531210986267169, 14.67696629213485, 16.237515605493158, 17.017790262172312,
          18.7734082397004, 19.553682896379556, 21.699438202247208, 22.86985018726594,
          25.015605493133606, 26.381086142322104, 28.33177278401999, 30.28245942571786,
          32.03807740324595, 33.988764044943835, 35.54931335830214, 37.89013732833959,
          39.255617977528104, 41.59644194756555, 44.32740324594258, 46.27808988764046,
          49.0090511860175, 52.91042446941324, 55.25124843945069, 58.37234706616731,
          61.68851435705369, 65.98002496878902, 68.90605493133585, 71.2468789013733,
          73.97784019975032, 76.51373283395756, 79.82990012484396, 81.78058676654183,
          84.51154806491886, 87.43757802746569, 91.33895131086143, 93.4847066167291,
          96.8008739076155, 100.11704119850188, 102.65293383270912,]


def get_height_in_meters():
    height_in_meters = [height * 1000 * 0.3048 for height in height]
    return height_in_meters


data_of_height_in_meters = get_height_in_meters()
height_in_meters = data_of_height_in_meters

# print(f'height in meter values = {height_in_meters}')

height_in_meters_final_data = [133.18352059925493, 156.02259176030554, 311.5543071161117, 430.4681647940105,
                               489.9250936329685, 549.3820224719179, 727.7528089887746, 787.2097378277241, 965.5805243445722, 1084.494382022471, 1381.7790262172352, 1500.6928838951426, 1797.9775280898982, 1857.434456928839, 1976.348314606746, 2333.0898876404513, 2511.4606741573084, 2808.745318352064, 3165.486891385777, 3403.3146067415746, 3819.5131086142333, 4473.539325842702, 4949.194756554315, 5187.022471910121, 5722.134831460683, 5959.962546816489, 6613.98876404495, 6970.7303370786585, 7624.756554307124, 8040.955056179778, 8635.524344569292,
                               9230.093632958804, 9765.205992509365, 10359.77528089888, 10835.430711610494, 11548.913857677908,
                               11965.112359550567, 12678.595505617981, 13510.9925093633, 14105.561797752813, 14937.958801498136,
                               16127.097378277158, 16840.580524344572, 17791.891385767794, 18802.659176029967, 20110.711610486895,
                               21002.565543071167, 21716.04868913858, 22548.4456928839, 23321.385767790267, 24332.15355805244, 24926.722846441953,
                               25759.119850187268, 26650.973782771543, 27840.112359550567, 28494.138576779034, 29504.906367041207, 30515.674157303376,
                               31288.614232209744]
# Height vs time1 data
time2 = [0.03279030910609837, 0.4632414369256468, 1.272556390977444, 1.8991228070175445, 2.6040100250626566,
         3.413324979114452, 4.327067669172933, 4.953634085213031, 5.580200501253134, 6.10233918128655,
         6.833333333333335, 7.69486215538847, 8.425856307435254, 9.104636591478698, 9.600668337510442,
         10.175020885547202, 10.8015873015873, 11.34983291562239, 11.845864661654137, 12.44632414369256,
         12.942355889724308, 13.229532163742686, 13.56892230576441, 13.986633249791144, 14.352130325814535,
         14.717627401837927, 15.213659147869674, 15.814118629908101, 16.284043441938177, 16.936716791979947,
         17.380534670008352, 17.980994152046783, 18.738095238095237, 19.15580618212197, 19.44298245614035,
         19.860693400167083, 20.121762740183794, 20.48725981620718, 20.826649958228906, 21.218253968253965,
         21.557644110275685, 21.89703425229741, 22.21031746031746, 22.497493734335837, 22.836883876357557,
         23.20238095238095, 23.567878028404344, 24.11612364243943, 24.42940685045948, 24.71658312447786,
         25.134294068504595, 25.578111946533, 25.91750208855472, 26.23078529657477, 26.622389306599832,
         27.118421052631575, 27.69277360066834, 28.423767752715122, 29.833542188805346]
# Mach number data
mach_ft = [0.0072109355405096665, 0.20833333333333215, 0.5022573363431135, 0.7178016052169554,
           0.9529408076247794, 1.2468648106345626, 1.5995736142462995, 1.7171432154502124,
           1.638763481314271, 1.638763481314271, 1.560383747178328, 1.442814145974415,
           1.3840293453724595, 1.3644344118384755, 1.4036242789064453, 1.5799786807123155,
           2.0306621519939796, 2.3833709556057183, 2.7948645598194126, 3.32392776523702,
           3.7354213694507123, 4.029345372460494, 4.284079508402305, 4.5975984449460725,
           4.773952846751943, 4.969902182091797, 5.048281916227738, 4.969902182091797,
           4.930712315023827, 4.91111738148984, 4.950307248557811, 4.8131427138199125,
           4.773952846751943, 4.754357913217957, 4.695573112616001, 4.715168046149985,
           4.969902182091797, 5.34220591923752, 5.753699523451216, 6.223977928266866,
           6.67466139954853, 7.0077752696262845, 7.419268873839979, 7.75238274391773,
           8.163876348131426, 8.732129420617003, 9.026053423626784, 9.613901429646347,
           9.966610233258086, 10.338913970403809, 10.867977175821418, 11.475420115374966,
           11.80853398545272, 12.141647855530472, 12.592331326812136, 13.043014798093802,
           13.532888136443438, 14.101141208929016, 15.022103085026332]

mach_values_ms = [0.08878709624796989, 0.09828388233718056, 0.8655007122248444, 0.4904194172916039,
                  0.33206310479281426, 0.2456384121308542, 1.304242267120109, 0.25749957688180675,
                  0.8102379638739878, 0.4735412124871189, 1.5811627110238007, 0.4758364530853777,
                  1.7869336669624487, 0.3584400194098129, 0.7652577626947569, 1.9178090321358483,
                  1.1545163586080964, 1.702447568227736, 2.050688668645083, 1.1670276533786088,
                  2.4104346891613235, 2.8208945161747137, 3.387887413803752, 1.703434340667068,
                  2.697464341229659, 1.606079652261706, 3.917386094917845, 2.286676496972833,
                  3.5551246625733817, 2.8849283518501454, 4.148082481755749, 2.733751378191298,
                  3.3515719050637514, 3.7544406028321977, 3.02798875684545, 5.14510271419116,
                  2.2600589773742974, 5.145102700777102, 4.292693644933428, 4.025899132147182,
                  5.295317257986989, 6.1168037457168305, 6.4199192882462945, 5.145102640060618,
                  6.066259433682495, 7.829064769869258, 7.988603486715213, 5.906796018208612,
                  12.652266182291966, 7.517502967651787, 7.704117998060269, 9.034285910521595,
                  6.3362546789313114, 7.886920304575979, 13.864192755643435, 5.77713575641909,
                  9.663999544347691, 15.034749288312755, 7.384953273948804]


def get_vel_values():
    velocity_values = [30.0005]  # Initial velocity

    for i in range(1, len(height_in_meters)):
        dh = height_in_meters[i] - height_in_meters[i-1]
        dt = time1[i] - time1[i-1]

        # Check if the time interval is zero to avoid division by zero
        if dt == 0:
            return "Time interval cannot be zero."

        velocity = dh / dt
        velocity_values.append(velocity)

    return velocity_values


# Calculate velocity values
velocity_values = get_vel_values()
length_of_velocity_values = len(velocity_values)
print(f'length of velocity values (m/s) : {length_of_velocity_values}')


length_time_in_trajectory = len(time1)
length_mach_ft = len(mach_ft)
length_mach_values_ms = len(mach_values_ms)
length_height_in_meters = len(height_in_meters)


############################################################################################################
############################################################################################################
print(f'length of time in trajectory (sec) = {length_time_in_trajectory}')
print(f'length of mach (for m/s) = {length_mach_values_ms}')
print(f'length of altitude values  (m) = {length_height_in_meters}')


# interpolate the data to remove variance/noise and make it more accurate
# Currently applying smoothing filter like Savitzky-Golay filter to the interpolated data:
t_interp1 = np.linspace(min(time1), max(time1), num=500)
t_interp2 = np.linspace(min(time2), max(time2), num=500)
h_interp = interp.interp1d(time1, height_in_meters, kind='cubic')(t_interp1)
mach_interp = interp.interp1d(time2, mach_ft, kind='cubic')(t_interp2)
h_interp_smooth = savgol_filter(h_interp, window_length=50, polyorder=5)
mach_interp_smooth = savgol_filter(mach_interp, window_length=50, polyorder=5)


# Time vs Altitude
plt.subplot(2, 2, 1)
plt.plot(time1, height_in_meters)
plt.title('Time vs Altitude')
plt.xlabel('Time (sec)')
plt.ylabel('Altitude (m)')

# Time vs Mach Number
plt.subplot(2, 2, 2)
plt.plot(time2, mach_ft)
plt.title('Time vs Mach Number--ft')
plt.xlabel('Time (sec)')
plt.ylabel('Mach Number')

# Time vs Altitude----interpolated
plt.subplot(2, 2, 3)
plt.plot(t_interp1, h_interp_smooth)
plt.title('Time vs Altitude --- interpolated')
plt.xlabel('Time (sec)')
plt.ylabel('Altitude (m)')

# Time vs Mach Number----interpolated
plt.subplot(2, 2, 4)
plt.plot(t_interp2, mach_interp_smooth)
plt.title('Time vs Mach Number ft --- interpolated')
plt.xlabel('Time (sec)')
plt.ylabel('Mach Number')
plt.tight_layout()
###################################################################################################
###################################################################################################
print(f'Time1:{time1}')
print(f'altitude : {height_in_meters}')
print(f'velocity values : {velocity_values}')
plt.show()
